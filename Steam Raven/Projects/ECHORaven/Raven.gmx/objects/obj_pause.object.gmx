<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Few things to note here.
- pause is the variable that contains whether or not the game is paused.
- str is the string to display in the middle when paused.
- w and h store the offset for drawing the text.
- select is the currently selected menu item.*/

pause = 0;
str = "PAUSED";
w = string_width(str) / 2;
h = string_height(str) / 2;
select = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Big chunk here. Essentially, we first check if the game is paused. If not, we do nothing. 
Next, we draw the sprite we created when we paused, and also draw a half-transparent 
rectangle over it to have a darkened screen. The next lines draw the text for the menu, 
first checking whether the menu item is selected, and if so highlighting it in red.*/

if(!pause) exit;
draw_sprite(ss, 0, 0, 0);//REGISTERED
draw_set_color(c_black);
draw_set_alpha(0.5);
draw_rectangle(0, 0, room_width, room_height, 0);
draw_set_alpha(1);
draw_set_color(c_white);
draw_text(room_width / 2 - w, room_height / 2 - h, str);
if(select == 0) draw_set_color(c_red);
draw_text(room_width / 2 - w, room_height / 2 + (h * 2), "Save");
draw_set_color(c_white);
if(select == 1) draw_set_color(c_red);
draw_text(room_width / 2 - w, room_height / 2 + (h * 4), "Load");
draw_set_color(c_white);
if(select == 2) draw_set_color(c_red);
draw_text(room_width / 2 - w, room_height / 2 + (h * 6), "Menu");
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(select &lt; 2 &amp;&amp; pause)
{
select += 1;
}
else if(pause)
{
select = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(select &gt; 0 &amp;&amp; pause)
{
   select -= 1;
}
else if(pause)
{
select = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pause)
{
    pause = 0;
    sprite_delete(ss);//REGISTERED
    instance_activate_all();
}
else
{
    pause = 1;
//    ss=sprite_create_from_screen(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], 0, 0, 1, 1)//REGISTERED
    ss=sprite_create_from_screen(view_xview[0], view_yview[0], room_width, room_height, 0, 0, 1, 1)//REGISTERED
    if(ss == -1)//REGISTERED
    {//REGISTERED
        show_error("Sprite loading for pause failed.", 0);//REGISTERED
    }//REGISTERED
    instance_deactivate_all(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pause)
{
switch(select)
{
case 0:
show_message("Game Saved!##(well, not really, this is just an example)");
break;
case 1:
show_message("Game Loaded!##(well, not really, this is just an example)");
break;
case 2:
//game_end();
room_goto(rm_mainmenu);
break;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
